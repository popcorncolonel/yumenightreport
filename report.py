from google.appengine.ext import ndb


class Report(ndb.Model):
    '''
    Information for the daily report
    '''
    """ Global stats snapshot
    # TO BE DEPRECATED IN 2018 - auto-generated by summation logic"""
    customers_this_year = ndb.IntegerProperty()
    dreams_this_year = ndb.IntegerProperty()
    yearly_dream_goal = ndb.IntegerProperty()

    year_goal = ndb.StringProperty()
    month_goal = ndb.StringProperty()
    daily_dream_goal = ndb.IntegerProperty()

    # TO BE DEPRECATED IN 2018 -- move logic to functions rather than computing something and storing it
    achievement_rate = ndb.FloatProperty()
    customers_today = ndb.IntegerProperty()
    dreams = ndb.IntegerProperty()
    dreamers = ndb.IntegerProperty()
    misc_notes = ndb.StringProperty()

    date = ndb.DateTimeProperty()
    lunch_customers_today = ndb.IntegerProperty()
    dinner_customers_today = ndb.IntegerProperty()
    lunch_dreams = ndb.IntegerProperty()
    dinner_dreams = ndb.IntegerProperty()
    lunch_dreamers = ndb.IntegerProperty()
    dinner_dreamers = ndb.IntegerProperty()

    working_members = ndb.StringProperty()
    supporting_members = ndb.StringProperty()
    visiting_members = ndb.StringProperty()
    end_time = ndb.TimeProperty()
    total_bowls = ndb.IntegerProperty()
    total_cups = ndb.IntegerProperty()
    chopsticks_missing = ndb.IntegerProperty()
    money_off_by = ndb.IntegerProperty()
    positive_cycle = ndb.IntegerProperty()

    haiku1 = ndb.StringProperty()
    haiku2 = ndb.StringProperty()
    haiku3 = ndb.StringProperty()

    def is_past_2017(self):
        return is_past_2017(self.date)

    def get_previous_reports(self):
        return Report.query(Report.date < self.date, Report.date.year == self.date.year).order(Report.date).fetch()

    def get_dreams_this_year(self):
        return sum(report.dreams for report in self.get_previous_reports())

    def get_dreamers_this_year(self):
        return sum(report.dreamers for report in self.get_previous_reporters())

    def get_customers_this_year(self):
        return sum(report.customers_today for report in self.get_previous_customers())

    def get_achievement_rate(self):
        if self.is_past_2017():
            if self.dreams is None:
                return None
            else:
                daily_dream_goal = self.daily_dream_goal()
                if daily_dream_goal  == 0:
                    return 100.
                achievement_rate = (dreams / float(daily_dream_goal)) * 100
            return achievement_rate

        else:
            return self.achievement_rate

    def get_customers_today(self):
        return self.lunch_customers_today + self.dinner_customers_today

    def get_dreamers(self):
        return self.lunch_dreamers + self.dinner_dreamers

    def get_dreams(self):
        return self.lunch_dreams + self.dinner_dreams

    def update(self, old_report):
        '''
        StringProperties are not checked for None because they can be "" which we don't want
        '''
        if old_report.customers_this_year is not None: self.customers_this_year = old_report.customers_this_year
        if old_report.dreams_this_year is not None: self.dreams_this_year = old_report.dreams_this_year
        if old_report.yearly_dream_goal is not None: self.yearly_dream_goal = old_report.yearly_dream_goal
        if old_report.year_goal: self.year_goal = old_report.year_goal
        if old_report.month_goal: self.month_goal = old_report.month_goal
        if old_report.daily_dream_goal is not None: self.daily_dream_goal = old_report.daily_dream_goal
        if old_report.date is not None: self.date = old_report.date
        if old_report.customers_today is not None: self.customers_today = old_report.customers_today
        if old_report.lunch_customers_today is not None: self.lunch_customers_today = old_report.lunch_customers_today
        if old_report.dinner_customers_today is not None: self.dinner_customers_today = old_report.dinner_customers_today
        if old_report.dreams is not None: self.dreams = old_report.dreams
        if old_report.lunch_dreams is not None: self.lunch_dreams = old_report.lunch_dreams
        if old_report.dinner_dreams is not None: self.dinner_dreams = old_report.dinner_dreams
        if old_report.dreamers is not None: self.dreamers = old_report.dreamers
        if old_report.lunch_dreamers is not None: self.lunch_dreamers = old_report.lunch_dreamers
        if old_report.dinner_dreamers is not None: self.dinner_dreamers = old_report.dinner_dreamers
        if old_report.working_members: self.working_members = old_report.working_members
        if old_report.supporting_members: self.supporting_members = old_report.supporting_members
        if old_report.visiting_members: self.visiting_members = old_report.visiting_members
        if old_report.end_time is not None: self.end_time = old_report.end_time
        if old_report.total_bowls is not None: self.total_bowls = old_report.total_bowls
        if old_report.total_cups is not None: self.total_cups = old_report.total_cups
        if old_report.chopsticks_missing is not None: self.chopsticks_missing = old_report.chopsticks_missing
        if old_report.money_off_by is not None: self.money_off_by = old_report.money_off_by
        if old_report.positive_cycle is not None: self.positive_cycle = old_report.positive_cycle
        if old_report.achievement_rate is not None: self.achievement_rate = old_report.achievement_rate
        if old_report.misc_notes: self.misc_notes = old_report.misc_notes

    @classmethod
    def get_reports_for_year(datetime_obj):
        ''' Gets all reports logged in the year of `datetime_obj` '''
        return Report.query(Report.date.year == datetime_obj.year).order(Report.date).fetch()

    @classmethod
    def get_dreams_for_year(datetime_obj):
        return sum(report.dreams for report in Report.get_reports_for_year(datetime_obj))

    @classmethod
    def get_dreamers_for_year(datetime_obj):
        return sum(report.dreamers for report in Report.get_reports_for_year(datetime_obj))

    @classmethod
    def get_customers_for_year(datetime_obj):
        return sum(report.customers for report in Report.get_reports_for_year(datetime_obj))

    @property
    def date_string(self):
        ''' 2017-06-13 '''
        if self.date:
            return self.date.strftime('%Y-%m-%d')
        else:
            return None

    @property
    def readable_date_string(self):
        ''' Tuesday June 13, 2017 '''
        if self.date:
            return self.date.strftime('%A %B %d, %Y')
        else:
            return None



